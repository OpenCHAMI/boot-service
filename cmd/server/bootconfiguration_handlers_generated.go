// Code generated by codegen. DO NOT EDIT.
// Copyright Â© 2025 OpenCHAMI a Series of LF Projects, LLC
//
// SPDX-License-Identifier: MIT
//
// This file contains REST API handlers for BootConfiguration resources.
// Generated from: pkg/codegen/templates/handlers.go.tmpl
//
// To modify this code:
//  1. Edit the template file: pkg/codegen/templates/handlers.go.tmpl
//  2. Run 'make dev' to regenerate
//  3. Do NOT edit this file directly - changes will be lost
//
// Generated handlers provide:
//   - GET /bootconfigurations (list all bootconfigurations)
//   - GET /bootconfigurations/{uid} (get specific BootConfiguration)
//   - POST /bootconfigurations (create new BootConfiguration)
//   - PUT /bootconfigurations/{uid} (update BootConfiguration)
//   - DELETE /bootconfigurations/{uid} (delete BootConfiguration)
//
// Authentication: DISABLED
// Storage: Uses storage.LoadBootConfiguration*/SaveBootConfiguration*/DeleteBootConfiguration*
// Version Support: Available (see version context in handlers)
//
// To enable full version conversion for this resource:
//  1. Create v2beta1 package: pkg/resources/bootconfiguration/v2beta1/
//  2. Implement converter: v2beta1/converter.go
//  3. Add version-aware storage: storage.LoadBootConfigurationWithVersion()
//  4. Register versions in cmd/server/main.go
package main

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/alexlovelltroy/fabrica/pkg/resource"
	"github.com/alexlovelltroy/fabrica/pkg/validation"
	"github.com/alexlovelltroy/fabrica/pkg/versioning"
	"github.com/go-chi/chi/v5"
	"github.com/openchami/boot-service/internal/storage"
	"github.com/openchami/boot-service/pkg/resources/bootconfiguration"
)

// GetBootConfigurations returns all BootConfiguration resources
func GetBootConfigurations(w http.ResponseWriter, r *http.Request) {

	bootconfigurations, err := storage.LoadAllBootConfigurations()
	if err != nil {
		respondError(w, http.StatusInternalServerError, fmt.Errorf("failed to load bootconfigurations: %w", err))
		return
	}
	respondJSON(w, http.StatusOK, bootconfigurations)
}

// GetBootConfiguration returns a specific BootConfiguration resource by UID
func GetBootConfiguration(w http.ResponseWriter, r *http.Request) {
	uid := chi.URLParam(r, "uid")
	if uid == "" {
		respondError(w, http.StatusBadRequest, fmt.Errorf("BootConfiguration UID is required"))
		return
	}

	// Version context available here for version-aware operations
	// versionCtx := versioning.GetVersionContext(r.Context())
	// Requested version: versionCtx.ServeVersion
	// To enable: replace storage.LoadBootConfiguration() with version-aware function

	bootConfiguration, err := storage.LoadBootConfiguration(uid)
	if err != nil {
		respondError(w, http.StatusNotFound, fmt.Errorf("BootConfiguration not found: %w", err))
		return
	}
	respondJSON(w, http.StatusOK, bootConfiguration)
}

// CreateBootConfiguration creates a new BootConfiguration resource
func CreateBootConfiguration(w http.ResponseWriter, r *http.Request) {
	var req CreateBootConfigurationRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		respondError(w, http.StatusBadRequest, fmt.Errorf("invalid request body: %w", err))
		return
	}

	// Get version context from request
	versionCtx := versioning.GetVersionContext(r.Context())

	uid, err := resource.GenerateUIDForResource("BootConfiguration")
	if err != nil {
		respondError(w, http.StatusInternalServerError, fmt.Errorf("failed to generate UID: %w", err))
		return
	}

	bootConfiguration := &bootconfiguration.BootConfiguration{
		Resource: resource.Resource{
			APIVersion:    versionCtx.GroupVersion,
			Kind:          "BootConfiguration",
			SchemaVersion: versionCtx.ServeVersion,
		},
		Spec: req.BootConfigurationSpec,
	}

	bootConfiguration.Metadata.Initialize(req.Name, uid)

	// Set labels and annotations
	for k, v := range req.Labels {
		bootConfiguration.SetLabel(k, v)
	}
	for k, v := range req.Annotations {
		bootConfiguration.SetAnnotation(k, v)
	}

	// Layer 2: Fabrica struct tag validation
	if err := validation.ValidateResource(bootConfiguration); err != nil {
		respondError(w, http.StatusBadRequest, fmt.Errorf("validation failed: %w", err))
		return
	}

	// Layer 3: Custom business logic validation
	if err := validation.ValidateWithContext(r.Context(), bootConfiguration); err != nil {
		respondError(w, http.StatusBadRequest, fmt.Errorf("validation failed: %w", err))
		return
	}

	// Set initial status

	// Save (Layer 1: Ent validation happens automatically if using Ent storage)
	if err := storage.SaveBootConfiguration(bootConfiguration); err != nil {
		respondError(w, http.StatusInternalServerError, fmt.Errorf("failed to save BootConfiguration: %w", err))
		return
	}

	respondJSON(w, http.StatusCreated, bootConfiguration)
}

// UpdateBootConfiguration updates an existing BootConfiguration resource
func UpdateBootConfiguration(w http.ResponseWriter, r *http.Request) {
	uid := chi.URLParam(r, "uid")
	if uid == "" {
		respondError(w, http.StatusBadRequest, fmt.Errorf("BootConfiguration UID is required"))
		return
	}

	bootConfiguration, err := storage.LoadBootConfiguration(uid)
	if err != nil {
		respondError(w, http.StatusNotFound, fmt.Errorf("BootConfiguration not found: %w", err))
		return
	}

	var req UpdateBootConfigurationRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		respondError(w, http.StatusBadRequest, fmt.Errorf("invalid request body: %w", err))
		return
	}

	// Apply updates
	if req.Name != "" {
		bootConfiguration.SetName(req.Name)
	}

	// Update spec fields - merge non-zero values from request
	bootConfiguration.Spec = req.BootConfigurationSpec

	// Update labels and annotations
	for k, v := range req.Labels {
		bootConfiguration.SetLabel(k, v)
	}
	for k, v := range req.Annotations {
		bootConfiguration.SetAnnotation(k, v)
	}

	bootConfiguration.Touch()

	if err := storage.SaveBootConfiguration(bootConfiguration); err != nil {
		respondError(w, http.StatusInternalServerError, fmt.Errorf("failed to save BootConfiguration: %w", err))
		return
	}

	respondJSON(w, http.StatusOK, bootConfiguration)
}

// DeleteBootConfiguration deletes a BootConfiguration resource
func DeleteBootConfiguration(w http.ResponseWriter, r *http.Request) {
	uid := chi.URLParam(r, "uid")
	if uid == "" {
		respondError(w, http.StatusBadRequest, fmt.Errorf("BootConfiguration UID is required"))
		return
	}

	if err := storage.DeleteBootConfiguration(uid); err != nil {
		respondError(w, http.StatusInternalServerError, fmt.Errorf("failed to delete BootConfiguration: %w", err))
		return
	}

	respondJSON(w, http.StatusOK, &DeleteResponse{
		Message: "BootConfiguration deleted successfully",
		UID:     uid,
	})
}
