// Code generated by codegen. DO NOT EDIT.
// Copyright Â© 2025 OpenCHAMI a Series of LF Projects, LLC
//
// SPDX-License-Identifier: MIT
//
// This file contains REST API route registrations for all resources.
// Generated from: pkg/codegen/templates/routes.go.tmpl
//
// To modify route registration:
//  1. Edit the template file: pkg/codegen/templates/routes.go.tmpl
//  2. Run 'make dev' to regenerate
//  3. Do NOT edit this file directly - changes will be lost
//
// This file registers routes for all resource types:
//   - /bmcs (BMC operations)
//   - /bootconfigurations (BootConfiguration operations)
//   - /nodes (Node operations)
//
// Route patterns:
//   - GET    /resource              -> List all resources
//   - GET    /resource/{uid}        -> Get specific resource
//   - POST   /resource              -> Create new resource
//   - PUT    /resource/{uid}        -> Update resource spec
//   - PATCH  /resource/{uid}        -> Patch resource spec
//   - DELETE /resource/{uid}        -> Delete resource
//   - PUT    /resource/{uid}/status -> Update resource status
//   - PATCH  /resource/{uid}/status -> Patch resource status
//
// To add middleware to routes:
//  1. Apply middleware in cmd/server/main.go before calling RegisterGeneratedRoutes
//  2. Use r.Use() calls in main.go, not in generated route functions
//
// To add custom routes:
//  1. Create a separate RegisterCustomRoutes function
//  2. Call it after RegisterGeneratedRoutes in main.go
package main

import (
	"github.com/go-chi/chi/v5"
)

// RegisterGeneratedRoutes registers all generated routes
// Note: Middleware should be applied in main.go before calling this function
func RegisterGeneratedRoutes(r chi.Router) {

	// BMC routes
	r.Route("/bmcs", func(r chi.Router) {
		r.Get("/", GetBMCs)
		r.Post("/", CreateBMC)
		r.Route("/{uid}", func(r chi.Router) {
			r.Get("/", GetBMC)
			r.Put("/", UpdateBMC)
			r.Patch("/", PatchBMC)
			r.Delete("/", DeleteBMC)

			// Status subresource
			r.Route("/status", func(r chi.Router) {
				r.Put("/", UpdateBMCStatus)
				r.Patch("/", PatchBMCStatus)
			})
		})
	})

	// BootConfiguration routes
	r.Route("/bootconfigurations", func(r chi.Router) {
		r.Get("/", GetBootConfigurations)
		r.Post("/", CreateBootConfiguration)
		r.Route("/{uid}", func(r chi.Router) {
			r.Get("/", GetBootConfiguration)
			r.Put("/", UpdateBootConfiguration)
			r.Patch("/", PatchBootConfiguration)
			r.Delete("/", DeleteBootConfiguration)

			// Status subresource
			r.Route("/status", func(r chi.Router) {
				r.Put("/", UpdateBootConfigurationStatus)
				r.Patch("/", PatchBootConfigurationStatus)
			})
		})
	})

	// Node routes
	r.Route("/nodes", func(r chi.Router) {
		r.Get("/", GetNodes)
		r.Post("/", CreateNode)
		r.Route("/{uid}", func(r chi.Router) {
			r.Get("/", GetNode)
			r.Put("/", UpdateNode)
			r.Patch("/", PatchNode)
			r.Delete("/", DeleteNode)

			// Status subresource
			r.Route("/status", func(r chi.Router) {
				r.Put("/", UpdateNodeStatus)
				r.Patch("/", PatchNodeStatus)
			})
		})
	})

	// OpenAPI documentation routes
	r.Get("/openapi.json", ServeOpenAPISpec)
	r.Get("/docs", ServeSwaggerUI)
}
