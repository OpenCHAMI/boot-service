// Copyright Â© 2025 OpenCHAMI a Series of LF Projects, LLC
//
// SPDX-License-Identifier: MIT

package bootscript

import (
	"bytes"
	"fmt"
	"html/template"
	"strings"

	"github.com/openchami/boot-service/pkg/resources/bootconfiguration"
	"github.com/openchami/boot-service/pkg/resources/node"
)

// buildIPXEScript generates an iPXE script from configuration and node data
func (c *BootScriptController) buildIPXEScript(config *bootconfiguration.BootConfiguration, node *node.Node) (string, error) {
	// Prepare template variables
	vars := c.prepareTemplateVars(config, node)

	// Use default template if no custom template is specified
	tmplContent := DefaultIPXETemplate

	// Parse and execute template
	tmpl, err := template.New("ipxe").Parse(tmplContent)
	if err != nil {
		return "", fmt.Errorf("parsing iPXE template: %w", err)
	}

	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, vars); err != nil {
		return "", fmt.Errorf("executing iPXE template: %w", err)
	}

	return buf.String(), nil
}

// prepareTemplateVars creates the variable map for template substitution
func (c *BootScriptController) prepareTemplateVars(config *bootconfiguration.BootConfiguration, node *node.Node) map[string]interface{} {
	vars := map[string]interface{}{
		// Node information
		"XName":    node.Spec.XName,
		"NID":      fmt.Sprintf("%d", node.Spec.NID),
		"BootMAC":  node.Spec.BootMAC,
		"Role":     node.Spec.Role,
		"SubRole":  node.Spec.SubRole,
		"Hostname": node.Spec.Hostname,
		"Groups":   strings.Join(node.Spec.Groups, ","),

		// Boot configuration
		"Kernel":   config.Spec.Kernel,
		"Initrd":   config.Spec.Initrd,
		"Params":   config.Spec.Params,
		"Priority": config.Spec.Priority,

		// Configuration metadata
		"ConfigName": config.Metadata.Name,
		"ConfigUID":  config.Metadata.UID,

		// Additional derived values
		"KernelFilename": extractFilename(config.Spec.Kernel),
		"InitrdFilename": extractFilename(config.Spec.Initrd),
	}

	return vars
}

// extractFilename extracts the filename from a URL or path
func extractFilename(urlOrPath string) string {
	if urlOrPath == "" {
		return ""
	}

	parts := strings.Split(urlOrPath, "/")
	return parts[len(parts)-1]
}

// DefaultIPXETemplate is the standard template for generating iPXE scripts
const DefaultIPXETemplate = `#!ipxe
# iPXE Boot Script
# Generated by OpenCHAMI Boot Service
# Node: {{.XName}} (NID: {{.NID}})
# Configuration: {{.ConfigName}}
# Role: {{.Role}}{{if .Groups}} Groups: {{.Groups}}{{end}}

echo Starting boot for {{.XName}}
echo Using configuration: {{.ConfigName}}
echo Role: {{.Role}}{{if .Groups}}, Groups: {{.Groups}}{{end}}

# Configure network interface
dhcp

# Set boot parameters
set kernel {{.Kernel}}
{{- if .Initrd}}
set initrd {{.Initrd}}
{{- end}}
{{- if .Params}}
set params {{.Params}}
{{- end}}

# Download and verify kernel
echo Downloading kernel: {{.KernelFilename}}
kernel ${kernel}{{if .Params}} ${params}{{end}}

{{- if .Initrd}}
# Download initrd
echo Downloading initrd: {{.InitrdFilename}}
initrd ${initrd}
{{- end}}

# Boot the system
echo Booting {{.XName}}...
boot
`

// MinimalIPXETemplate is used for nodes without specific configurations
const MinimalIPXETemplate = `#!ipxe
# Minimal iPXE Boot Script
# Node: {{.Identifier}}

echo Boot service found node {{.Identifier}} but no configuration available
echo Attempting default network boot...

# Configure network
dhcp

# Attempt default boot
echo Trying default boot methods...
boot
`

// ErrorIPXETemplate is used when there are errors in script generation
const ErrorIPXETemplate = `#!ipxe
# Error iPXE Boot Script
# Error: {{.Error}}

echo Boot script generation failed
echo Error: {{.Error}}
echo Please contact system administrator

# Halt system to prevent boot loops
halt
`
