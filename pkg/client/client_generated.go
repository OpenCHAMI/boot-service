// Code generated by codegen. DO NOT EDIT.
// Copyright Â© 2025 OpenCHAMI a Series of LF Projects, LLC
//
// SPDX-License-Identifier: MIT
//
// This file provides a Go HTTP client library for the inventory API.
// Generated from: pkg/codegen/templates/client.go.tmpl
//
// To modify the client:
//  1. Edit the template file: pkg/codegen/templates/client.go.tmpl
//  2. Run 'make dev' to regenerate
//  3. Do NOT edit this file directly - changes will be lost
//
// Generated client methods for each resource:
//   - GetResources(ctx) - List all resources
//   - GetResource(ctx, uid) - Get specific resource by UID
//   - CreateResource(ctx, req) - Create new resource
//   - UpdateResource(ctx, uid, req) - Update existing resource spec
//   - PatchResource(ctx, uid, patchData, contentType) - Patch existing resource spec
//   - UpdateResourceStatus(ctx, uid, status) - Update resource status only
//   - PatchResourceStatus(ctx, uid, patchData) - Patch resource status only
//   - DeleteResource(ctx, uid) - Delete resource
//
// Usage example:
//
//	client, err := client.NewClient("http://localhost:8080", nil)
//	if err != nil {
//	    log.Fatal(err)
//	}
//
//	bmcs, err := client.GetBMCs(context.Background())
//	if err != nil {
//	    log.Fatal(err)
//	}
//
// To add authentication:
//  1. Create custom http.Client with auth transport
//  2. Pass it to NewClient:
//     httpClient := &http.Client{
//     Transport: &AuthTransport{Token: "your-token"},
//     }
//     client, _ := client.NewClient(baseURL, httpClient)
//
// To add custom headers:
//  1. Modify doRequest method to accept header options
//  2. Or wrap http.Client with custom RoundTripper
//
// To handle retries:
//  1. Wrap http.Client with retry transport
//  2. Use github.com/hashicorp/go-retryablehttp or similar
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/openchami/boot-service/pkg/resources/bmc"
	"github.com/openchami/boot-service/pkg/resources/bootconfiguration"
	"github.com/openchami/boot-service/pkg/resources/node"
	"io"
	"net/http"
	"net/url"
	"path"
)

// Client provides access to the inventory API
type Client struct {
	baseURL    *url.URL
	httpClient *http.Client
	version    string // Optional API version for Accept/Content-Type headers
}

// ErrorResponse represents an API error response
type ErrorResponse struct {
	Error string `json:"error"`
}

// NewClient creates a new API client
func NewClient(baseURL string, httpClient *http.Client) (*Client, error) {
	if httpClient == nil {
		httpClient = http.DefaultClient
	}

	u, err := url.Parse(baseURL)
	if err != nil {
		return nil, fmt.Errorf("invalid base URL: %w", err)
	}

	return &Client{
		baseURL:    u,
		httpClient: httpClient,
	}, nil
}

// WithVersion returns a new client configured to use a specific API version
func (c *Client) WithVersion(version string) *Client {
	return &Client{
		baseURL:    c.baseURL,
		httpClient: c.httpClient,
		version:    version,
	}
}

// doRequest performs an HTTP request and handles the response
func (c *Client) doRequest(ctx context.Context, method, endpoint string, body interface{}, result interface{}) error {
	var reqBody io.Reader
	if body != nil {
		jsonData, err := json.Marshal(body)
		if err != nil {
			return fmt.Errorf("failed to marshal request body: %w", err)
		}
		reqBody = bytes.NewBuffer(jsonData)
	}

	u := *c.baseURL
	u.Path = path.Join(u.Path, endpoint)

	req, err := http.NewRequestWithContext(ctx, method, u.String(), reqBody)
	if err != nil {
		return fmt.Errorf("failed to create request: %w", err)
	}

	// Set Content-Type and Accept headers with optional version
	contentType := "application/json"
	acceptType := "application/json"
	if c.version != "" {
		contentType = fmt.Sprintf("application/json;version=%s", c.version)
		acceptType = fmt.Sprintf("application/json;version=%s", c.version)
	}

	if body != nil {
		req.Header.Set("Content-Type", contentType)
	}
	req.Header.Set("Accept", acceptType)

	resp, err := c.httpClient.Do(req)
	if err != nil {
		return fmt.Errorf("request failed: %w", err)
	}
	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("failed to read response body: %w", err)
	}

	if resp.StatusCode >= 400 {
		var errorResp ErrorResponse
		if err := json.Unmarshal(respBody, &errorResp); err != nil {
			return fmt.Errorf("HTTP error %d: %s", resp.StatusCode, string(respBody))
		}
		return fmt.Errorf("API error (%d): %s", resp.StatusCode, errorResp.Error)
	}

	if result != nil {
		if err := json.Unmarshal(respBody, result); err != nil {
			return fmt.Errorf("failed to unmarshal response: %w", err)
		}
	}

	return nil
}

// doPatchRequest performs a PATCH request with custom content type
func (c *Client) doPatchRequest(ctx context.Context, endpoint string, patchData []byte, contentType string, result interface{}) error {
	u := *c.baseURL
	u.Path = path.Join(u.Path, endpoint)

	req, err := http.NewRequestWithContext(ctx, "PATCH", u.String(), bytes.NewBuffer(patchData))
	if err != nil {
		return fmt.Errorf("failed to create patch request: %w", err)
	}

	// Set patch-specific Content-Type
	req.Header.Set("Content-Type", contentType)

	// Set Accept header with optional version
	acceptType := "application/json"
	if c.version != "" {
		acceptType = fmt.Sprintf("application/json;version=%s", c.version)
	}
	req.Header.Set("Accept", acceptType)

	resp, err := c.httpClient.Do(req)
	if err != nil {
		return fmt.Errorf("patch request failed: %w", err)
	}
	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("failed to read patch response body: %w", err)
	}

	if resp.StatusCode >= 400 {
		var errorResp ErrorResponse
		if err := json.Unmarshal(respBody, &errorResp); err != nil {
			return fmt.Errorf("PATCH HTTP error %d: %s", resp.StatusCode, string(respBody))
		}
		return fmt.Errorf("PATCH API error (%d): %s", resp.StatusCode, errorResp.Error)
	}

	if result != nil {
		if err := json.Unmarshal(respBody, result); err != nil {
			return fmt.Errorf("failed to unmarshal patch response: %w", err)
		}
	}

	return nil
}

// GetBMCs retrieves all bmcs
func (c *Client) GetBMCs(ctx context.Context) ([]bmc.BMC, error) {
	var response []bmc.BMC
	if err := c.doRequest(ctx, "GET", "/bmcs", nil, &response); err != nil {
		return nil, err
	}
	return response, nil
}

// GetBMC retrieves a specific BMC by UID
func (c *Client) GetBMC(ctx context.Context, uid string) (*bmc.BMC, error) {
	var result bmc.BMC
	endpoint := fmt.Sprintf("/bmcs/%s", uid)
	if err := c.doRequest(ctx, "GET", endpoint, nil, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

// CreateBMC creates a new BMC
func (c *Client) CreateBMC(ctx context.Context, req CreateBMCRequest) (*bmc.BMC, error) {
	var result bmc.BMC
	if err := c.doRequest(ctx, "POST", "/bmcs", req, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

// UpdateBMC updates an existing BMC
func (c *Client) UpdateBMC(ctx context.Context, uid string, req UpdateBMCRequest) (*bmc.BMC, error) {
	var result bmc.BMC
	endpoint := fmt.Sprintf("/bmcs/%s", uid)
	if err := c.doRequest(ctx, "PUT", endpoint, req, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

// PatchBMC patches an existing BMC spec with the specified patch data and content type
func (c *Client) PatchBMC(ctx context.Context, uid string, patchData []byte, contentType string) (*bmc.BMC, error) {
	var result bmc.BMC
	endpoint := fmt.Sprintf("/bmcs/%s", uid)
	if err := c.doPatchRequest(ctx, endpoint, patchData, contentType, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

// UpdateBMCStatus updates only the status of an existing BMC
// This method is intended for controllers, reconcilers, and monitoring systems.
// It preserves the spec and only updates the status portion of the resource.
func (c *Client) UpdateBMCStatus(ctx context.Context, uid string, status bmc.BMCStatus) (*bmc.BMC, error) {
	var result bmc.BMC
	endpoint := fmt.Sprintf("/bmcs/%s/status", uid)
	if err := c.doRequest(ctx, "PUT", endpoint, status, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

// PatchBMCStatus patches only the status of an existing BMC
// Supports JSON Merge Patch by default. Use PatchBMCStatusWithType for other patch formats.
func (c *Client) PatchBMCStatus(ctx context.Context, uid string, patchData []byte) (*bmc.BMC, error) {
	return c.PatchBMCStatusWithType(ctx, uid, patchData, "application/merge-patch+json")
}

// PatchBMCStatusWithType patches status with a specific patch content type
// Supported types: application/merge-patch+json, application/json-patch+json, application/fabrica-patch+json
func (c *Client) PatchBMCStatusWithType(ctx context.Context, uid string, patchData []byte, contentType string) (*bmc.BMC, error) {
	var result bmc.BMC
	endpoint := fmt.Sprintf("/bmcs/%s/status", uid)
	if err := c.doPatchRequest(ctx, endpoint, patchData, contentType, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

// DeleteBMC deletes a BMC by UID
func (c *Client) DeleteBMC(ctx context.Context, uid string) error {
	endpoint := fmt.Sprintf("/bmcs/%s", uid)
	var response DeleteResponse
	if err := c.doRequest(ctx, "DELETE", endpoint, nil, &response); err != nil {
		return err
	}
	return nil
}

// GetBootConfigurations retrieves all bootconfigurations
func (c *Client) GetBootConfigurations(ctx context.Context) ([]bootconfiguration.BootConfiguration, error) {
	var response []bootconfiguration.BootConfiguration
	if err := c.doRequest(ctx, "GET", "/bootconfigurations", nil, &response); err != nil {
		return nil, err
	}
	return response, nil
}

// GetBootConfiguration retrieves a specific BootConfiguration by UID
func (c *Client) GetBootConfiguration(ctx context.Context, uid string) (*bootconfiguration.BootConfiguration, error) {
	var result bootconfiguration.BootConfiguration
	endpoint := fmt.Sprintf("/bootconfigurations/%s", uid)
	if err := c.doRequest(ctx, "GET", endpoint, nil, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

// CreateBootConfiguration creates a new BootConfiguration
func (c *Client) CreateBootConfiguration(ctx context.Context, req CreateBootConfigurationRequest) (*bootconfiguration.BootConfiguration, error) {
	var result bootconfiguration.BootConfiguration
	if err := c.doRequest(ctx, "POST", "/bootconfigurations", req, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

// UpdateBootConfiguration updates an existing BootConfiguration
func (c *Client) UpdateBootConfiguration(ctx context.Context, uid string, req UpdateBootConfigurationRequest) (*bootconfiguration.BootConfiguration, error) {
	var result bootconfiguration.BootConfiguration
	endpoint := fmt.Sprintf("/bootconfigurations/%s", uid)
	if err := c.doRequest(ctx, "PUT", endpoint, req, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

// PatchBootConfiguration patches an existing BootConfiguration spec with the specified patch data and content type
func (c *Client) PatchBootConfiguration(ctx context.Context, uid string, patchData []byte, contentType string) (*bootconfiguration.BootConfiguration, error) {
	var result bootconfiguration.BootConfiguration
	endpoint := fmt.Sprintf("/bootconfigurations/%s", uid)
	if err := c.doPatchRequest(ctx, endpoint, patchData, contentType, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

// UpdateBootConfigurationStatus updates only the status of an existing BootConfiguration
// This method is intended for controllers, reconcilers, and monitoring systems.
// It preserves the spec and only updates the status portion of the resource.
func (c *Client) UpdateBootConfigurationStatus(ctx context.Context, uid string, status bootconfiguration.BootConfigurationStatus) (*bootconfiguration.BootConfiguration, error) {
	var result bootconfiguration.BootConfiguration
	endpoint := fmt.Sprintf("/bootconfigurations/%s/status", uid)
	if err := c.doRequest(ctx, "PUT", endpoint, status, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

// PatchBootConfigurationStatus patches only the status of an existing BootConfiguration
// Supports JSON Merge Patch by default. Use PatchBootConfigurationStatusWithType for other patch formats.
func (c *Client) PatchBootConfigurationStatus(ctx context.Context, uid string, patchData []byte) (*bootconfiguration.BootConfiguration, error) {
	return c.PatchBootConfigurationStatusWithType(ctx, uid, patchData, "application/merge-patch+json")
}

// PatchBootConfigurationStatusWithType patches status with a specific patch content type
// Supported types: application/merge-patch+json, application/json-patch+json, application/fabrica-patch+json
func (c *Client) PatchBootConfigurationStatusWithType(ctx context.Context, uid string, patchData []byte, contentType string) (*bootconfiguration.BootConfiguration, error) {
	var result bootconfiguration.BootConfiguration
	endpoint := fmt.Sprintf("/bootconfigurations/%s/status", uid)
	if err := c.doPatchRequest(ctx, endpoint, patchData, contentType, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

// DeleteBootConfiguration deletes a BootConfiguration by UID
func (c *Client) DeleteBootConfiguration(ctx context.Context, uid string) error {
	endpoint := fmt.Sprintf("/bootconfigurations/%s", uid)
	var response DeleteResponse
	if err := c.doRequest(ctx, "DELETE", endpoint, nil, &response); err != nil {
		return err
	}
	return nil
}

// GetNodes retrieves all nodes
func (c *Client) GetNodes(ctx context.Context) ([]node.Node, error) {
	var response []node.Node
	if err := c.doRequest(ctx, "GET", "/nodes", nil, &response); err != nil {
		return nil, err
	}
	return response, nil
}

// GetNode retrieves a specific Node by UID
func (c *Client) GetNode(ctx context.Context, uid string) (*node.Node, error) {
	var result node.Node
	endpoint := fmt.Sprintf("/nodes/%s", uid)
	if err := c.doRequest(ctx, "GET", endpoint, nil, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

// CreateNode creates a new Node
func (c *Client) CreateNode(ctx context.Context, req CreateNodeRequest) (*node.Node, error) {
	var result node.Node
	if err := c.doRequest(ctx, "POST", "/nodes", req, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

// UpdateNode updates an existing Node
func (c *Client) UpdateNode(ctx context.Context, uid string, req UpdateNodeRequest) (*node.Node, error) {
	var result node.Node
	endpoint := fmt.Sprintf("/nodes/%s", uid)
	if err := c.doRequest(ctx, "PUT", endpoint, req, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

// PatchNode patches an existing Node spec with the specified patch data and content type
func (c *Client) PatchNode(ctx context.Context, uid string, patchData []byte, contentType string) (*node.Node, error) {
	var result node.Node
	endpoint := fmt.Sprintf("/nodes/%s", uid)
	if err := c.doPatchRequest(ctx, endpoint, patchData, contentType, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

// UpdateNodeStatus updates only the status of an existing Node
// This method is intended for controllers, reconcilers, and monitoring systems.
// It preserves the spec and only updates the status portion of the resource.
func (c *Client) UpdateNodeStatus(ctx context.Context, uid string, status node.NodeStatus) (*node.Node, error) {
	var result node.Node
	endpoint := fmt.Sprintf("/nodes/%s/status", uid)
	if err := c.doRequest(ctx, "PUT", endpoint, status, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

// PatchNodeStatus patches only the status of an existing Node
// Supports JSON Merge Patch by default. Use PatchNodeStatusWithType for other patch formats.
func (c *Client) PatchNodeStatus(ctx context.Context, uid string, patchData []byte) (*node.Node, error) {
	return c.PatchNodeStatusWithType(ctx, uid, patchData, "application/merge-patch+json")
}

// PatchNodeStatusWithType patches status with a specific patch content type
// Supported types: application/merge-patch+json, application/json-patch+json, application/fabrica-patch+json
func (c *Client) PatchNodeStatusWithType(ctx context.Context, uid string, patchData []byte, contentType string) (*node.Node, error) {
	var result node.Node
	endpoint := fmt.Sprintf("/nodes/%s/status", uid)
	if err := c.doPatchRequest(ctx, endpoint, patchData, contentType, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

// DeleteNode deletes a Node by UID
func (c *Client) DeleteNode(ctx context.Context, uid string) error {
	endpoint := fmt.Sprintf("/nodes/%s", uid)
	var response DeleteResponse
	if err := c.doRequest(ctx, "DELETE", endpoint, nil, &response); err != nil {
		return err
	}
	return nil
}
