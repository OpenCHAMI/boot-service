// Code generated by fabrica generate. DO NOT EDIT.
// Copyright Â© 2025 OpenCHAMI a Series of LF Projects, LLC
//
// SPDX-License-Identifier: MIT
//
// This file provides storage convenience functions for your resources.
// It uses the fabrica storage backend system.
//
// To modify storage behavior:
//  1. Edit pkg/codegen/templates/storage.go.tmpl
//  2. Run 'fabrica generate' to regenerate
//
// To change storage backend:
//  1. Call storage.Init() with a different backend in main.go
//  2. Options: FileBackend, EntBackend (database), or custom backend
package storage

import (
	"context"
	"encoding/json"
	"fmt"

	fabricaStorage "github.com/alexlovelltroy/fabrica/pkg/storage"

	"github.com/openchami/boot-service/pkg/resources/bootconfiguration"
	"github.com/openchami/boot-service/pkg/resources/node"
)

// Backend is the storage backend used by all storage operations.
// Initialize this in your main.go before using any storage functions.
//
// Example:
//
//	backend, err := fabricaStorage.NewFileBackend("./data")
//	if err != nil {
//	    log.Fatal(err)
//	}
//	storage.Init(backend)
var Backend fabricaStorage.StorageBackend

// Init initializes the storage backend.
// This must be called before using any storage functions.
func Init(backend fabricaStorage.StorageBackend) {
	Backend = backend
}

// InitFileBackend is a convenience function to initialize file-based storage.
// It creates the directory if it doesn't exist.
func InitFileBackend(dataDir string) error {
	backend, err := fabricaStorage.NewFileBackend(dataDir)
	if err != nil {
		return fmt.Errorf("failed to create file backend: %w", err)
	}
	Backend = backend
	return nil
}

// ensureBackend panics if Backend is not initialized.
// This is called by all storage functions to ensure proper initialization.
func ensureBackend() {
	if Backend == nil {
		panic("storage backend not initialized: call storage.Init() or storage.InitFileBackend() in main.go")
	}
}

// BootConfiguration storage operations

// LoadAllBootConfigurations retrieves all BootConfiguration resources.
//
// Parameters:
//   - ctx: Context for cancellation and timeouts
//
// Returns:
//   - []*bootconfiguration.BootConfiguration: Slice of BootConfiguration resources
//   - error: Any error that occurred during loading
func LoadAllBootConfigurations(ctx context.Context) ([]*bootconfiguration.BootConfiguration, error) {
	ensureBackend()

	rawData, err := Backend.LoadAll(ctx, "BootConfiguration")
	if err != nil {
		return nil, fmt.Errorf("failed to load all bootconfigurations: %w", err)
	}

	bootconfigurations := make([]*bootconfiguration.BootConfiguration, 0, len(rawData))
	for _, raw := range rawData {
		bootConfiguration := &bootconfiguration.BootConfiguration{}
		if err := json.Unmarshal(raw, bootConfiguration); err != nil {
			return nil, fmt.Errorf("failed to unmarshal BootConfiguration: %w", err)
		}
		bootconfigurations = append(bootconfigurations, bootConfiguration)
	}

	return bootconfigurations, nil
}

// LoadBootConfiguration retrieves a single BootConfiguration resource by UID.
//
// Parameters:
//   - ctx: Context for cancellation and timeouts
//   - uid: Unique identifier of the BootConfiguration resource
//
// Returns:
//   - *bootconfiguration.BootConfiguration: The BootConfiguration resource
//   - error: fabricaStorage.ErrNotFound if resource doesn't exist, other errors for failures
func LoadBootConfiguration(ctx context.Context, uid string) (*bootconfiguration.BootConfiguration, error) {
	ensureBackend()

	rawData, err := Backend.Load(ctx, "BootConfiguration", uid)
	if err != nil {
		return nil, fmt.Errorf("failed to load BootConfiguration %s: %w", uid, err)
	}

	bootConfiguration := &bootconfiguration.BootConfiguration{}
	if err := json.Unmarshal(rawData, bootConfiguration); err != nil {
		return nil, fmt.Errorf("failed to unmarshal BootConfiguration: %w", err)
	}

	return bootConfiguration, nil
}

// SaveBootConfiguration stores a BootConfiguration resource.
//
// Parameters:
//   - ctx: Context for cancellation and timeouts
//   - bootConfiguration: The BootConfiguration resource to save
//
// Returns:
//   - error: Any error that occurred during saving
func SaveBootConfiguration(ctx context.Context, bootConfiguration *bootconfiguration.BootConfiguration) error {
	ensureBackend()

	data, err := json.Marshal(bootConfiguration)
	if err != nil {
		return fmt.Errorf("failed to marshal BootConfiguration: %w", err)
	}

	if err := Backend.Save(ctx, "BootConfiguration", bootConfiguration.Metadata.UID, data); err != nil {
		return fmt.Errorf("failed to save BootConfiguration: %w", err)
	}

	return nil
}

// UpdateBootConfiguration updates an existing BootConfiguration resource.
//
// Parameters:
//   - ctx: Context for cancellation and timeouts
//   - bootConfiguration: The BootConfiguration resource to update
//
// Returns:
//   - error: fabricaStorage.ErrNotFound if resource doesn't exist, other errors for failures
func UpdateBootConfiguration(ctx context.Context, bootConfiguration *bootconfiguration.BootConfiguration) error {
	ensureBackend()

	// Check if resource exists first
	exists, err := Backend.Exists(ctx, "BootConfiguration", bootConfiguration.Metadata.UID)
	if err != nil {
		return fmt.Errorf("failed to check BootConfiguration existence: %w", err)
	}
	if !exists {
		return fabricaStorage.ErrNotFound
	}

	data, err := json.Marshal(bootConfiguration)
	if err != nil {
		return fmt.Errorf("failed to marshal BootConfiguration: %w", err)
	}

	if err := Backend.Save(ctx, "BootConfiguration", bootConfiguration.Metadata.UID, data); err != nil {
		return fmt.Errorf("failed to update BootConfiguration: %w", err)
	}

	return nil
}

// DeleteBootConfiguration removes a BootConfiguration resource by UID.
//
// Parameters:
//   - ctx: Context for cancellation and timeouts
//   - uid: Unique identifier of the BootConfiguration resource
//
// Returns:
//   - error: fabricaStorage.ErrNotFound if resource doesn't exist, other errors for failures
func DeleteBootConfiguration(ctx context.Context, uid string) error {
	ensureBackend()

	if err := Backend.Delete(ctx, "BootConfiguration", uid); err != nil {
		return fmt.Errorf("failed to delete BootConfiguration %s: %w", uid, err)
	}

	return nil
}

// ExistsBootConfiguration checks if a BootConfiguration resource exists.
//
// Parameters:
//   - ctx: Context for cancellation and timeouts
//   - uid: Unique identifier of the BootConfiguration resource
//
// Returns:
//   - bool: true if the resource exists
//   - error: Any error that occurred during the check
func ExistsBootConfiguration(ctx context.Context, uid string) (bool, error) {
	ensureBackend()

	exists, err := Backend.Exists(ctx, "BootConfiguration", uid)
	if err != nil {
		return false, fmt.Errorf("failed to check BootConfiguration existence: %w", err)
	}

	return exists, nil
}

// ListBootConfigurationUIDs returns UIDs of all BootConfiguration resources.
//
// Parameters:
//   - ctx: Context for cancellation and timeouts
//
// Returns:
//   - []string: Array of BootConfiguration resource UIDs
//   - error: Any error that occurred during listing
func ListBootConfigurationUIDs(ctx context.Context) ([]string, error) {
	ensureBackend()

	uids, err := Backend.List(ctx, "BootConfiguration")
	if err != nil {
		return nil, fmt.Errorf("failed to list BootConfiguration UIDs: %w", err)
	}

	return uids, nil
}

// Node storage operations

// LoadAllNodes retrieves all Node resources.
//
// Parameters:
//   - ctx: Context for cancellation and timeouts
//
// Returns:
//   - []*node.Node: Slice of Node resources
//   - error: Any error that occurred during loading
func LoadAllNodes(ctx context.Context) ([]*node.Node, error) {
	ensureBackend()

	rawData, err := Backend.LoadAll(ctx, "Node")
	if err != nil {
		return nil, fmt.Errorf("failed to load all nodes: %w", err)
	}

	nodes := make([]*node.Node, 0, len(rawData))
	for _, raw := range rawData {
		node := &node.Node{}
		if err := json.Unmarshal(raw, node); err != nil {
			return nil, fmt.Errorf("failed to unmarshal Node: %w", err)
		}
		nodes = append(nodes, node)
	}

	return nodes, nil
}

// LoadNode retrieves a single Node resource by UID.
//
// Parameters:
//   - ctx: Context for cancellation and timeouts
//   - uid: Unique identifier of the Node resource
//
// Returns:
//   - *node.Node: The Node resource
//   - error: fabricaStorage.ErrNotFound if resource doesn't exist, other errors for failures
func LoadNode(ctx context.Context, uid string) (*node.Node, error) {
	ensureBackend()

	rawData, err := Backend.Load(ctx, "Node", uid)
	if err != nil {
		return nil, fmt.Errorf("failed to load Node %s: %w", uid, err)
	}

	node := &node.Node{}
	if err := json.Unmarshal(rawData, node); err != nil {
		return nil, fmt.Errorf("failed to unmarshal Node: %w", err)
	}

	return node, nil
}

// SaveNode stores a Node resource.
//
// Parameters:
//   - ctx: Context for cancellation and timeouts
//   - node: The Node resource to save
//
// Returns:
//   - error: Any error that occurred during saving
func SaveNode(ctx context.Context, node *node.Node) error {
	ensureBackend()

	data, err := json.Marshal(node)
	if err != nil {
		return fmt.Errorf("failed to marshal Node: %w", err)
	}

	if err := Backend.Save(ctx, "Node", node.Metadata.UID, data); err != nil {
		return fmt.Errorf("failed to save Node: %w", err)
	}

	return nil
}

// UpdateNode updates an existing Node resource.
//
// Parameters:
//   - ctx: Context for cancellation and timeouts
//   - node: The Node resource to update
//
// Returns:
//   - error: fabricaStorage.ErrNotFound if resource doesn't exist, other errors for failures
func UpdateNode(ctx context.Context, node *node.Node) error {
	ensureBackend()

	// Check if resource exists first
	exists, err := Backend.Exists(ctx, "Node", node.Metadata.UID)
	if err != nil {
		return fmt.Errorf("failed to check Node existence: %w", err)
	}
	if !exists {
		return fabricaStorage.ErrNotFound
	}

	data, err := json.Marshal(node)
	if err != nil {
		return fmt.Errorf("failed to marshal Node: %w", err)
	}

	if err := Backend.Save(ctx, "Node", node.Metadata.UID, data); err != nil {
		return fmt.Errorf("failed to update Node: %w", err)
	}

	return nil
}

// DeleteNode removes a Node resource by UID.
//
// Parameters:
//   - ctx: Context for cancellation and timeouts
//   - uid: Unique identifier of the Node resource
//
// Returns:
//   - error: fabricaStorage.ErrNotFound if resource doesn't exist, other errors for failures
func DeleteNode(ctx context.Context, uid string) error {
	ensureBackend()

	if err := Backend.Delete(ctx, "Node", uid); err != nil {
		return fmt.Errorf("failed to delete Node %s: %w", uid, err)
	}

	return nil
}

// ExistsNode checks if a Node resource exists.
//
// Parameters:
//   - ctx: Context for cancellation and timeouts
//   - uid: Unique identifier of the Node resource
//
// Returns:
//   - bool: true if the resource exists
//   - error: Any error that occurred during the check
func ExistsNode(ctx context.Context, uid string) (bool, error) {
	ensureBackend()

	exists, err := Backend.Exists(ctx, "Node", uid)
	if err != nil {
		return false, fmt.Errorf("failed to check Node existence: %w", err)
	}

	return exists, nil
}

// ListNodeUIDs returns UIDs of all Node resources.
//
// Parameters:
//   - ctx: Context for cancellation and timeouts
//
// Returns:
//   - []string: Array of Node resource UIDs
//   - error: Any error that occurred during listing
func ListNodeUIDs(ctx context.Context) ([]string, error) {
	ensureBackend()

	uids, err := Backend.List(ctx, "Node")
	if err != nil {
		return nil, fmt.Errorf("failed to list Node UIDs: %w", err)
	}

	return uids, nil
}
